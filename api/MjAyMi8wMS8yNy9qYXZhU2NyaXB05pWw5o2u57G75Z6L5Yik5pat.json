{"title":"javaScript数据类型判断","date":"2022-01-27T01:54:28.000Z","date_formatted":{"ll":"Jan 27, 2022","L":"01/27/2022","MM-DD":"01-27"},"link":"2022/01/27/javaScript数据类型判断","updated":"2022-01-27T01:55:25.536Z","content":"<h2 id=\"1、typeof\">1、typeof<a title=\"#1、typeof\" href=\"#1、typeof\"></a></h2>\n<blockquote>\n<p>适用场景</p>\n<p><font color='red'>typeof</font> 操作符可以准确判断一个变量是否为下面几个<font color='red'>原始类型</font>：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof &#x27;ConardLi&#x27;  // string</span><br><span class=\"line\">typeof 123  // number</span><br><span class=\"line\">typeof true  // boolean</span><br><span class=\"line\">typeof Symbol()  // symbol</span><br><span class=\"line\">typeof undefined  // undefined</span><br><span class=\"line\">typeof function()&#123;&#125;  // function</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不适用场景</p>\n<p>当你用 typeof 来判断<font color='red'>引用类型</font>时似乎显得有些乏力了：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof [] // object</span><br><span class=\"line\">typeof &#123;&#125; // object</span><br><span class=\"line\">typeof new Date() // object</span><br><span class=\"line\">typeof /^\\d*$/; // object</span><br></pre></td></tr></table></figure>\n<p>另外 <font color='red'>typeof null === ‘object’</font> 也会让人感到头痛，这是在 JavaScript==初版就流传下来的 bug==，后面由于修改会造成大量的兼容问题就一直没有被修复…</p>\n<hr>\n<h2 id=\"2、instanceof\">2、instanceof<a title=\"#2、instanceof\" href=\"#2、instanceof\"></a></h2>\n<blockquote>\n<p><font color='red'>instanceof</font> 操作符可以帮助我们判断引用类型具体是什么类型的对象：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] instanceof Array // true</span><br><span class=\"line\">new Date() instanceof Date // true</span><br><span class=\"line\">new RegExp() instanceof RegExp // true</span><br></pre></td></tr></table></figure>\n<p>我们先来回顾下原型链的几条规则：</p>\n<ul>\n<li>所有引用类型都具有对象特性，即可以自由扩展属性</li>\n<li>所有引用类型都具有一个<font color='red'>__proto__</font> （隐式原型）属性，是一个普通对象</li>\n<li>所有的函数都具有 <font color='red'>prototype</font> （显式原型）属性，也是一个普通对象</li>\n<li>所有引用类型 <font color='red'>__proto__</font> 值指向它构造函数的 <font color='red'>prototype</font></li>\n<li>当试图得到一个对象的属性时，如果变量本身没有这个属性，则会去他的 <font color='red'>__proto__</font> 中去找</li>\n</ul>\n<p><font color='red'>[ ] instanceof Array</font> 实际上是判断 <font color='red'>Array.prototype</font> 是否在 <font color='red'>[ ]</font> 的原型链上。</p>\n<p>所以，使用<font color='red'> instanceof </font> 来检测数据类型，不会很准确，这不是它设计的初衷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] instanceof Object // true</span><br><span class=\"line\">function()&#123;&#125;  instanceof Object // true</span><br></pre></td></tr></table></figure>\n<p>另外，使用<font color='red'> instanceof </font>也不能检测基本数据类型，所以<font color='red'> instanceof </font>并不是一个很好的选择。</p>\n<hr>\n<h2 id=\"3、tostring\">3、toString<a title=\"#3、tostring\" href=\"#3、tostring\"></a></h2>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>调用</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(true) </font></td>\n<td><font color='red'> ‘[object Boolean]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(123) </font></td>\n<td><font color='red'> ‘[object Number]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(‘test’) </font></td>\n<td><font color='red'> ‘[object String]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(null) </font></td>\n<td><font color='red'> ‘[object Null]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(undefined) </font></td>\n<td><font color='red'> ‘[object Undefined]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(Symbol()) </font></td>\n<td><font color='red'> ‘[object Symbol]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call({}) </font></td>\n<td><font color='red'> ‘[object Object]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(function(){}) </font></td>\n<td><font color='red'> ‘[object Function]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call([]) </font></td>\n<td><font color='red'> ‘[object Array]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(new Error()) </font></td>\n<td><font color='red'> ‘[object Error]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(new RegExp()) </font></td>\n<td><font color='red'> ‘[object RegExp]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(Math) </font></td>\n<td><font color='red'> ‘[object Math]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(JSON) </font></td>\n<td><font color='red'> ‘[object JSON]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(new Document()) </font></td>\n<td><font color='red'> ‘[object Document]’ </font></td>\n</tr>\n<tr>\n<td><font color='red'> Object.prototype.toString.call(window) </font></td>\n<td><font color='red'> ‘[object Window]’ </font></td>\n</tr>\n</tbody>\n</table></div></div>","next":{"title":"测试文章","link":"2022/01/27/测试文章"},"plink":"http://example.com/2022/01/27/javaScript数据类型判断/","toc":[{"id":"1、typeof","title":"1、typeof","index":"1"},{"id":"2、instanceof","title":"2、instanceof","index":"2"},{"id":"3、tostring","title":"3、toString","index":"3"}],"reading_time":"520 words in 3 min"}